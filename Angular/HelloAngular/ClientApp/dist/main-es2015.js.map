{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/Doctors.ts","./src/app/Patients.ts","./src/app/Specialization.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/doctor.component.ts","./src/app/doctor.component.html","./src/app/doctor.service.ts","./src/app/notfound.component.ts","./src/app/patient.component.ts","./src/app/patient.component.html","./src/app/patient.service.ts","./src/app/specialization.component.ts","./src/app/specialization.component.html","./src/app/specialization.service.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Specialization } from \"./Specialization\";\r\nimport { NumberValueAccessor } from \"@angular/forms\";\r\n\r\nexport class Doctors {\r\n    constructor(\r\n        id?: number,\r\n        familyname?: string,\r\n        firstname?: string,\r\n        middlename?: string,\r\n        Created?: Date,\r\n        Deleted?: Date,\r\n        SpecializationId?: Number,\r\n        Specialization?: string,\r\n        specialization?: any,\r\n    ) {\r\n\r\n    }\r\n}","export class Patients {\r\n    constructor(\r\n        public Id?: number,\r\n        public Iin?: string,\r\n        Firstname?: string,\r\n        Familyname?: string,\r\n        Middlename?: string,\r\n        Address?: string,\r\n        Phonenumber?: string,\r\n        created?: Date\r\n    ) { }\r\n}","export class Specialization {\r\n    constructor(\r\n        public id?: number,\r\n        public name?: string,\r\n        public created?: Date\r\n    ) {}\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { SpecializationService } from './specialization.service';\r\nimport { Specialization } from './Specialization';\r\nimport { DoctorService } from './doctor.service';\r\n\r\n@Component({\r\n    selector: 'app',\r\n        templateUrl: 'app.component.html',\r\n    providers: [SpecializationService, DoctorService]\r\n})\r\nexport class AppComponent implements OnInit {\r\n    specializations: Specialization[] = [];\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","<div>\r\n    <nav>\r\n        <a routerLink=\"\">Главная</a>\r\n    </nav>\r\n    <nav>\r\n        <a routerLink=\"/api/home/specialization\">Специализации</a>\r\n        <a routerLink=\"api/home/doctors\">  Доктора</a>\r\n        <a routerLink=\"api/home/patients\"> Пациенты</a>\r\n    </nav>\r\n    <router-outlet> </router-outlet>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport {Routes, RouterModule} from \"@angular/router\";\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport {NotFoundComponent} from './notfound.component';\r\nimport {doctorcomponent} from './doctor.component';\r\nimport {specializationcomponent} from './specialization.component';\r\nimport {patientcomponent} from './patient.component';\r\n\r\nimport {HttpClientModule} from '@angular/common/http';\r\n\r\nconst appRoutes: Routes =[\r\n    { path: 'api/home/specialization', component: specializationcomponent},\r\n    { path: 'api/home/doctors', component: doctorcomponent},\r\n    { path: 'api/home/patients', component: patientcomponent},\r\n    { path: '**', component: NotFoundComponent}\r\n];\r\n \r\n@NgModule({\r\n    imports: [BrowserModule, FormsModule, HttpClientModule, RouterModule.forRoot(appRoutes)],\r\n    declarations: [AppComponent, specializationcomponent, doctorcomponent, patientcomponent],\r\n    bootstrap: [AppComponent],\r\n})\r\nexport class AppModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { DoctorService } from './doctor.service';\r\nimport { Doctors } from './Doctors';\r\n\r\n@Component({\r\n    selector: 'doctors',\r\n    templateUrl: './doctor.component.html',\r\n    providers: [DoctorService]\r\n})\r\n\r\nexport class doctorcomponent implements OnInit {\r\n    doctors: Doctors[] = [];\r\n    doctor: Doctors = new Doctors();\r\n    tableMode: boolean = true;\r\n    constructor(private doctorservice: DoctorService) { }\r\n\r\n    ngOnInit() {\r\n        this.doctorservice.getDoctors().subscribe((data: Doctors[])=>this.doctors = data);\r\n    }\r\n\r\n    createDoctor(doc: Doctors) {\r\n\r\n    }\r\n\r\n    editDoctor(doc: Doctors) {\r\n    }\r\n\r\n    save() {\r\n        // if (this.spec.id == null ?? ) Если null создаем обьект, если нет то редактируем   \r\n    }\r\n\r\n}\r\n","<!-- <input type=\"button\" value=\"Добавить\" class=\"btn btn-default\" (click)=\"add()\" />  -->\r\n<h2>Доктора</h2>\r\n<table class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>Id</td>\r\n            <td>ФИО</td>\r\n            <td>Создан</td>\r\n            <!-- <td>Специализация</td -->\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let doc of doctors\"> \r\n                <td>{{doc?.id}}</td>\r\n                <td>{{doc?.familyname}} {{doc?.firstname}} {{doc?.middlename}}</td>\r\n                <td>{{doc?.created}}</td>\r\n                <td>\r\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"editDoctor(doc)\">\r\n                        Изменить</button>\r\n                    <!-- <button class=\"btn btn-sm btn-danger\" (click)=\"delete(p)\">Удалить</button> -->\r\n                </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<ng-template #createoredit>\r\n\r\n</ng-template>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Doctors} from './Doctors'\r\n\r\n@Injectable()\r\nexport class DoctorService {\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    private url = \"https://localhost:44351/api/home/doctors\";\r\n    private urlforcreating = \"https://localhost:44351/api/home/CreateDoctor\";\r\n    private urlfordeleting = \"https://localhost:44351/api/home/DeleteDoctor\";\r\n\r\n    getDoctors() {\r\n        return this.http.get(this.url);\r\n    }\r\n    \r\n    getDoctor(id: number) {\r\n        return  this.http.get(this.url+'/'+id);\r\n    }\r\n\r\n    createDoctor(doc: Doctors) {\r\n        return this.http.post(this.urlforcreating, doc);\r\n    }\r\n\r\n    editDoctor(doc: Doctors) {\r\n        return this.http.put(this.url, doc);\r\n    }\r\n\r\n    deleteDoctor(docid: number) {\r\n        return this.http.delete(this.urlfordeleting+'/'+docid);\r\n    }\r\n}","import { Component} from '@angular/core';\r\n  \r\n@Component({\r\n    selector: 'not-found-app',\r\n    template: `<h3>Страница не найдена</h3>`\r\n})\r\nexport class NotFoundComponent { }","import { Component, OnInit } from '@angular/core';\r\nimport { PatientService } from './patient.service';\r\nimport { Patients } from './Patients';\r\n\r\n@Component({\r\n    selector: 'patients',\r\n    templateUrl: './patient.component.html',\r\n    providers: [PatientService]\r\n})\r\n\r\nexport class patientcomponent implements OnInit {\r\n    patients: Patients[] = [];\r\n    patient: Patients = new Patients();\r\n    tableMode: boolean = true;\r\n    constructor(private patientservice: PatientService) { }\r\n\r\n    ngOnInit() {\r\n        this.patientservice.getPatients().subscribe((data: Patients[])=>this.patients = data);\r\n    }\r\n\r\n    createPatient(patient: Patients) {\r\n\r\n    }\r\n\r\n    editPatient(patient: Patients) {\r\n    }\r\n\r\n    save() {\r\n        // if (this.spec.id == null ?? ) Если null создаем обьект, если нет то редактируем   \r\n    }\r\n\r\n}\r\n","<!-- <input type=\"button\" value=\"Добавить\" class=\"btn btn-default\" (click)=\"add()\" />  -->\r\n<h1>Пациенты</h1>\r\n<table *ngIf=\"tableMode; else createoredit\" class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>ИИН</td>\r\n            <td>ФИО</td>\r\n            <td>Адрес</td>\r\n            <td>Телефон</td>\r\n            <td></td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let patient of patients\"> \r\n                <td>{{patient?.iin}}</td>\r\n                <td>{{patient?.familyname}} {{patient?.firstname}} {{patient?.middlename}}</td>\r\n                <td>{{patient?.address}}</td>\r\n                <td>{{patient?.phonenumber}}</td>\r\n                <td>\r\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"editPatient(patient)\">\r\n                        Изменить</button>\r\n                    <!-- <button class=\"btn btn-sm btn-danger\" (click)=\"delete(p)\">Удалить</button> -->\r\n                </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<ng-template #createoredit>\r\n\r\n</ng-template>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Patients} from './Patients'\r\n\r\n@Injectable()\r\nexport class PatientService {\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    private url = \"https://localhost:44351/api/home/patients\";\r\n\r\n    getPatients () {\r\n        return this.http.get(this.url);\r\n    }\r\n    \r\n    getPatient (id: number) {\r\n        return  this.http.get(this.url+'/'+id);\r\n    }\r\n\r\n    createPatient (patient: Patients) {\r\n        return this.http.post(this.url, patient);\r\n    }\r\n\r\n    editPatient (patient: Patients) {\r\n        return this.http.put(this.url, patient);\r\n    }\r\n}","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { SpecializationService } from './specialization.service';\r\nimport { Specialization } from './Specialization';\r\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n    selector: 'specialization',\r\n    templateUrl: './specialization.component.html',\r\n    providers: [SpecializationService]\r\n})\r\n\r\nexport class specializationcomponent implements OnInit {\r\n    specializations: Specialization[] = [];\r\n    spec: Specialization = new Specialization();\r\n    tableMode: boolean = true;\r\n    constructor(private specializationservice: SpecializationService) \r\n    { }\r\n\r\n    ngOnInit() {\r\n        this.loadSpecializations();\r\n    }\r\n\r\n    loadSpecializations() {\r\n        this.specializationservice.getSpecializations().subscribe((data:Specialization[])=>\r\n        this.specializations = data);\r\n    }\r\n    editSpecialization(newspec: Specialization) {\r\n        this.spec = newspec;\r\n    }\r\n    \r\n    deleteSpecialization(goodbyespec: Specialization) {\r\n        console.log(goodbyespec);\r\n        this.specializationservice.deleteSpecialization(goodbyespec.id).subscribe(\r\n            result=>{this.loadSpecializations();}\r\n        );\r\n    }\r\n\r\n    save(newspec: Specialization) {\r\n        if (newspec.id == null) {\r\n            this.specializationservice.createSpecialization(newspec).subscribe((data: Specialization) =>\r\n                this.specializations.push(data));\r\n        }\r\n        else {\r\n            this.specializationservice.editSpecialization(newspec).subscribe(result=>{this.loadSpecializations();})\r\n        }\r\n        this.cancel();\r\n    }\r\n\r\n    cancel() {\r\n        this.spec = new Specialization();\r\n        this.tableMode = true;\r\n    }\r\n\r\n    add() {\r\n        this.cancel();\r\n        this.tableMode = false;\r\n    }    \r\n}\r\n\r\n\r\n","<!-- <input type=\"button\" value=\"Добавить\" class=\"btn btn-default\" (click)=\"add()\" />  -->\r\n<h1>Специализации</h1>\r\n<input type=\"button\" value=\"Добавить Специализацию\" class=\"btn btn-default\" (click)=\"add()\" />\r\n<!-- <li>\r\n    <button mat-raised-button (click)=\"openDialog()\">Pick one</button>\r\n</li> -->\r\n<table *ngIf=\"tableMode; else CreateSpecialization\" class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>Id</td>\r\n            <td>Имя</td>\r\n            <td>Создан</td>\r\n            <td></td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let specc of specializations\"> \r\n            <ng-template [ngIf] = \"spec?.id != specc.id\" [ngIfElse]=\"EditSpecialization\">\r\n                <td>{{specc?.id}}</td>\r\n                <td>{{specc?.name}}</td>\r\n                <td>{{specc?.created}}</td>\r\n                <td>\r\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"editSpecialization(specc)\">\r\n                        Изменить</button>\r\n                    <button class=\"btn btn-sm btn-danger\" (click)=\"deleteSpecialization(specc)\">\r\n                        Удалить</button>\r\n                </td>\r\n            </ng-template>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<ng-template #CreateSpecialization>\r\n    <div class=\"form-group\">\r\n        <label>Имя Специализации</label>\r\n        <input type=\"text\" [(ngModel)]=\"spec.name\" class=\"form-control\" />\r\n    </div>\r\n    <div>\r\n        <input type=\"button\" value=\"Сохранить\" (click)=\"save(spec)\" class=\"btn btn-success\" />\r\n        <input type=\"button\" value=\"Отмена\" (click)=\"cancel()\" class=\"btn btn-warning\" />\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #EditSpecialization>\r\n    <div class=\"form-group\">\r\n        <label>Имя Специализации</label>\r\n        <input type=\"text\" [(ngModel)] = \"spec.name\" class=\"form-control\" />\r\n    </div>\r\n    <div>\r\n        <input type=\"button\" value=\"Сохранить\" (click)=\"save(spec)\" class=\"btn btn-success\" />\r\n        <input type=\"button\" value=\"Отмена\" (click)=\"cancel()\" class=\"btn btn-warning\" />\r\n    </div>\r\n</ng-template>","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Specialization } from './Specialization';\r\n\r\n@Injectable()\r\nexport class SpecializationService {\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    private url = \"https://localhost:44351/api/home/specialization\";\r\n    private urlforcreating = \"https://localhost:44351/api/home/createspecialization\";\r\n    private urlfordeleting = \"https://localhost:44351/api/home/deletespecialization\";\r\n\r\n    getSpecializations() {\r\n        return this.http.get(this.url);\r\n    }\r\n    \r\n    getSpecialization(id: number) {\r\n        return  this.http.get(this.url+'/'+id);\r\n    }\r\n\r\n    createSpecialization(spec: Specialization) {\r\n        return this.http.post(this.urlforcreating, spec);\r\n    }\r\n\r\n    editSpecialization(spec: Specialization) {\r\n        return this.http.put(this.url, spec);\r\n    }\r\n\r\n    deleteSpecialization(specid: number) {\r\n        console.log(specid);\r\n        return this.http.delete(this.urlfordeleting+'/'+specid);\r\n    }\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nenableProdMode();\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);"],"sourceRoot":"webpack:///"}